# bootstrap.yaml
---
- name: Bootstrapping
  become: true
  hosts: all
  tasks:
    - name: Clean house before (re)trying dotfiles
      ansible.builtin.file:
        state: absent
        path: "~/.local/share/chezmoi"
      become_user: "{{ item  }}"
      loop:
        - "{{ ansible_user }}"
        - root
      tags: dotfiles

    - name: Set up dotfiles for both '{{ ansible_user }}' and 'root'
      ansible.builtin.shell: >-
        set -o pipefail
        && curl --fail --location --silent https://git.io/jlucktay-dotfiles
        | bash
      args:
        executable: /bin/bash
      changed_when: false
      become_user: "{{ item  }}"
      loop:
        - "{{ ansible_user }}"
        - root
      tags: dotfiles

    - name: Reset SSH connection to allow dotfile changes to affect users
      ansible.builtin.meta: reset_connection
      tags: dotfiles

    - name: Set timezone to UTC
      ansible.builtin.command: timedatectl set-timezone UTC
      register: set_timezone
      changed_when: set_timezone.rc == 0

    - name: Slurp kernel command line
      ansible.builtin.slurp:
        src: /boot/cmdline.txt
      register: boot_cmdline
      tags: kubernetes

    - name: Enable memory cgroup in kernel command line
      ansible.builtin.copy:
        content: |
          cgroup_enable=memory cgroup_memory=1 {{ boot_cmdline.content | b64decode | trim }}
        dest: /boot/cmdline.txt
        mode: 0755
      when: '"cgroup_enable=memory cgroup_memory=1" not in boot_cmdline.content | b64decode | trim'
      tags: kubernetes

    - name: Update some packages to latest
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - avahi-daemon
          - ca-certificates
          - curl
          - gnupg
          - raspi-config
        state: present
        install_recommends: false
        update_cache: true

    - name: Don't autologin at boot
      ansible.builtin.command: raspi-config nonint do_boot_behaviour B1
      register: disable_autologin
      changed_when: disable_autologin.rc == 0

    - name: Make sure filesystem has expanded to use whole SD card
      ansible.builtin.command: raspi-config nonint do_expand_rootfs
      register: expand_filesystem
      changed_when: expand_filesystem.rc == 0

    - name: Reduce GPU memory to minimum (16MB)
      ansible.builtin.command: raspi-config nonint do_memory_split 16
      register: reduce_gpu_memory
      changed_when: reduce_gpu_memory.rc == 0

    - name: Set hostname
      ansible.builtin.command: "raspi-config nonint do_hostname {{ pi_name }}"
      register: set_hostname
      changed_when: set_hostname.rc == 0
      tags: redundant-rpi-imager

    - name: Disable swap permanently
      ansible.builtin.shell: >-
        set -o pipefail
        && dphys-swapfile swapoff
        && dphys-swapfile uninstall
        && systemctl disable dphys-swapfile
      register: disable_swap
      changed_when: disable_swap.rc == 0
      args:
        executable: /bin/bash
        removes: /var/swap
      tags: kubernetes

    - name: Disable audio
      ansible.builtin.lineinfile:
        path: /boot/config.txt
        regexp: "^dtparam=audio=on$"
        line: dtparam=audio=off

    - name: Disable Bluetooth
      ansible.builtin.lineinfile:
        path: /boot/config.txt
        line: dtoverlay=disable-bt

    - name: >-
        Let iptables see bridged traffic
        (https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#letting-iptables-see-bridged-traffic)
        (https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd)
        make sure that the modules necessary for Kubernetes and containerd are loaded
      ansible.builtin.command: "modprobe {{ item }}"
      register: load_module
      changed_when: load_module.rc == 0
      loop:
        - br_netfilter
        - overlay
      tags: kubernetes

    - name: Make sure that the modules necessary for Kubernetes and containerd are loaded redux
      ansible.builtin.lineinfile:
        create: true
        mode: 0644
        path: /etc/modules-load.d/kubernetes-cri.conf
        line: "{{ item }}"
      loop:
        - br_netfilter
        - overlay
      tags: kubernetes

    - name: Let iptables see bridged traffic redux, and containerd prerequisites
      ansible.posix.sysctl:
        name: "{{ item }}"
        reload: true
        state: present
        sysctl_file: /etc/sysctl.d/99-kubernetes-cri.conf
        sysctl_set: true
        value: "1"
      loop:
        - net.bridge.bridge-nf-call-ip6tables
        - net.bridge.bridge-nf-call-iptables
        - net.ipv4.ip_forward
      tags: kubernetes

    - name: Add Docker's official GPG key
      ansible.builtin.shell: >-
        set -o pipefail
        && curl --fail --location --show-error --silent https://download.docker.com/linux/debian/gpg
        | gpg --dearmor --output /usr/share/keyrings/docker-archive-keyring.gpg
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg
        executable: /bin/bash
      tags: kubernetes

    - name: Set up the stable Docker repository
      ansible.builtin.lineinfile:
        create: true
        mode: 0644
        path: /etc/apt/sources.list.d/docker.list
        line: >-
          deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg]
          https://download.docker.com/linux/debian
          {{ ansible_distribution_release }}
          stable
      tags: kubernetes

    - name: Install containerd
      ansible.builtin.apt:
        name: containerd.io
        state: present
        install_recommends: false
        update_cache: true
      tags: kubernetes

    - name: Reboot
      ansible.builtin.reboot:

    - name: Configure Avahi
      community.general.ini_file:
        path: /etc/avahi/avahi-daemon.conf
        section: "{{ item.section }}"
        option: "{{ item.option }}"
        value: "{{ item.value }}"
        no_extra_spaces: true
        mode: 0644
      notify:
        - Restart Avahi daemon
      with_items: "{{ avahi_settings }}"
      vars:
        avahi_settings:
          #
          ## Section [server]
          #
          - section: server
            option: host-name
            value: "{{ pi_name }}"
          - section: server
            option: domain-name
            value: local
          - section: server
            option: use-ipv4
            value: "yes"
          - section: server
            option: use-ipv6
            value: "no"
          - section: server
            option: allow-interfaces
            value: wlan0
          - section: server
            option: deny-interfaces
            value: eth0
          - section: server
            option: disallow-other-stacks
            value: "yes"

          #
          ## Section [publish]
          #
          - section: publish
            option: disable-publishing
            value: "no"
          - section: publish
            option: publish-addresses
            value: "yes"
          - section: publish
            option: publish-hinfo
            value: "yes"
          - section: publish
            option: publish-workstation
            value: "yes"

    - name: Put some settings into crontab
      ansible.builtin.cron:
        env: true
        name: "{{ item.name }}"
        job: "{{ item.job }}"
        cron_file: /etc/crontab
        user: root
      with_items: "{{ cron_settings }}"
      vars:
        cron_settings:
          - name: MAILTO
            job: ""
          - name: PATH
            job: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          - name: SHELL
            job: /bin/bash

    - name: If the host has the 'hc_ping' var defined, set up a cron job to ping https://healthchecks.io
      ansible.builtin.cron:
        name: Health check ping
        minute: "*/15"
        job: >-
          curl
          --fail
          --max-time 10
          --retry 5
          --show-error
          --silent
          "https://hc-ping.com/{{ hc_ping }}"
          |&
          logger -t healthcheck
        cron_file: /etc/crontab
        user: root
      when: hc_ping is defined

    - name: Get Google Cloud public signing key
      ansible.builtin.get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        dest: /usr/share/keyrings/kubernetes-archive-keyring.gpg
        mode: 0644
      tags: kubernetes

    - name: Add the Kubernetes apt repository
      ansible.builtin.lineinfile:
        create: true
        mode: 0644
        path: /etc/apt/sources.list.d/kubernetes.list
        line: >-
          deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg]
          https://apt.kubernetes.io/ kubernetes-xenial main
      tags: kubernetes

  handlers:
    - name: Restart Avahi daemon
      ansible.builtin.systemd:
        name: avahi-daemon
        daemon_reload: true
        state: restarted
