# provision.yaml
---
- name: >-
    Provision the Raspberry Pi SD card(s) for a headless fresh install
    (https://www.raspberrypi.org/documentation/configuration/wireless/headless.md)
  gather_facts: false
  hosts: localhost
  tasks:
    - name: Register output from helper script
      ansible.builtin.command:
        cmd: "{{ playbook_dir }}/../scripts/raspios64-release.sh"
      register: raspios64_release
      changed_when: raspios64_release.rc == 0

    - name: Stat local image
      ansible.builtin.stat:
        path: "{{ raspios64_release.stdout_lines[0] }}"
      register: stat_image

    - name: Get helper script to (resume) download, if we don't have the full image locally
      ansible.builtin.command:
        cmd: >-
          "{{ playbook_dir }}/../scripts/raspios64-release.sh"
          --download
      when: stat_image.stat.size < raspios64_release.stdout_lines[1] | int

    - name: Stat mount point
      ansible.builtin.stat:
        path: /Volumes/boot
      register: stat_mount

    - name: Stat rpi-imager
      ansible.builtin.stat:
        path: "/Applications/Raspberry Pi Imager.app/Contents/MacOS/rpi-imager"
      register: rpi_imager_binary

    - name: End play if mount point or rpi-imager binary does not exist
      ansible.builtin.meta: end_play
      when: not stat_mount.stat.exists or not rpi_imager_binary.stat.exists

    - name: Run rpi-imager
      ansible.builtin.command:
        cmd: >-
          "/Applications/Raspberry Pi Imager.app/Contents/MacOS/rpi-imager"
          --cli
          ~/Downloads/raspios-arm64/2022-04-04-raspios-bullseye-arm64.img.xz
          /dev/disk2
      # TODO: look at which disk /Volume/boot is mounted from, and replace second argument above
      register: run_rpi_imager
      changed_when: run_rpi_imager.rc == 0

    - name: Pause to allow user to re-mount ejected media
      ansible.builtin.pause:
        prompt: "Please reinsert the SD card now!"

    - name: Enable SSH daemon
      ansible.builtin.copy:
        content: ""
        dest: /Volumes/boot/ssh
        force: false
        mode: 0664

    - name: Set up wireless LAN info via the '/boot' partition
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../wpa_supplicant.conf"
        dest: "/Volumes/boot/wpa_supplicant.conf"
        mode: 0664

    - name: Eject SD card
      ansible.builtin.command:
        cmd: diskutil eject /Volumes/boot
      register: eject
      changed_when: eject.rc == 0
